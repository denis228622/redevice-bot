import os
import asyncio
import nest_asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("Error: BOT_TOKEN environment variable is not set")

ADMIN_CHAT_ID = 1044925457  # –¢–≤–æ–π Telegram ID

PHOTO, DESCRIPTION, PRICE = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üì± –û—Ü–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É", "‚ùì –ß—Ç–æ –º—ã —Å–∫—É–ø–∞–µ–º?"],
        ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ —Å–∫—É–ø–∫–µ —Ç–µ—Ö–Ω–∏–∫–∏ Re:Device.", reply_markup=reply_markup
    )

async def handle_start_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üì± –û—Ü–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É":
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ç–µ—Ö–Ω–∏–∫–∏.")
        return PHOTO

    elif text == "‚ùì –ß—Ç–æ –º—ã —Å–∫—É–ø–∞–µ–º?":
        await update.message.reply_text(
            "üì¶ –°–∫—É–ø–∏–º:\n"
            "üì± ‚Äî –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã Android –∏ iPhone\n"
            "üíª ‚Äî –ù–æ—É—Ç–±—É–∫–∏, –ø—Ä–∏—Å—Ç–∞–≤–∫–∏, –ø–ª–∞–Ω—à–µ—Ç—ã, –ü–ö\n"
            "‚åö ‚Äî Apple Watch, AirPods –∏ –¥—Ä."
        )
        return ConversationHandler.END

    elif text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram: @skupka_denis")
        return ConversationHandler.END

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.")
        return PHOTO
    photo_file = update.message.photo[-1]
    context.user_data['photo_file_id'] = photo_file.file_id
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ (–º–æ–¥–µ–ª—å, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è):"
    )
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    await update.message.reply_text("–ö–∞–∫—É—é —Ü–µ–Ω—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?")
    return PRICE

async def get_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    price_text = update.message.text
    context.user_data['price'] = price_text

    user = update.message.from_user
    username = f"@{user.username}" if user.username else user.full_name

    caption = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–∫—É–ø–∫—É —Ç–µ—Ö–Ω–∏–∫–∏:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['description']}\n"
        f"–¶–µ–Ω–∞: {context.user_data['price']}\n"
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä: @skupka_denis"
    )

    await context.bot.send_photo(
        chat_id=ADMIN_CHAT_ID,
        photo=context.user_data['photo_file_id'],
        caption=caption,
    )

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("üì± –û—Ü–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É"), handle_start_buttons)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_price)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_buttons))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
